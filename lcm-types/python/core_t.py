"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class core_t(object):
    __slots__ = ["phase", "cmd", "q", "dq", "z", "v", "z_axis", "omega"]

    __typenames__ = ["double", "double", "double", "double", "double", "double", "double", "double"]

    __dimensions__ = [[2], [3], [12], [12], None, [3], [3], [3]]

    def __init__(self):
        self.phase = [ 0.0 for dim0 in range(2) ]
        self.cmd = [ 0.0 for dim0 in range(3) ]
        self.q = [ 0.0 for dim0 in range(12) ]
        self.dq = [ 0.0 for dim0 in range(12) ]
        self.z = 0.0
        self.v = [ 0.0 for dim0 in range(3) ]
        self.z_axis = [ 0.0 for dim0 in range(3) ]
        self.omega = [ 0.0 for dim0 in range(3) ]

    def encode(self):
        buf = BytesIO()
        buf.write(core_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>2d', *self.phase[:2]))
        buf.write(struct.pack('>3d', *self.cmd[:3]))
        buf.write(struct.pack('>12d', *self.q[:12]))
        buf.write(struct.pack('>12d', *self.dq[:12]))
        buf.write(struct.pack(">d", self.z))
        buf.write(struct.pack('>3d', *self.v[:3]))
        buf.write(struct.pack('>3d', *self.z_axis[:3]))
        buf.write(struct.pack('>3d', *self.omega[:3]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != core_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return core_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = core_t()
        self.phase = struct.unpack('>2d', buf.read(16))
        self.cmd = struct.unpack('>3d', buf.read(24))
        self.q = struct.unpack('>12d', buf.read(96))
        self.dq = struct.unpack('>12d', buf.read(96))
        self.z = struct.unpack(">d", buf.read(8))[0]
        self.v = struct.unpack('>3d', buf.read(24))
        self.z_axis = struct.unpack('>3d', buf.read(24))
        self.omega = struct.unpack('>3d', buf.read(24))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if core_t in parents: return 0
        tmphash = (0x774778e6685ecce8) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if core_t._packed_fingerprint is None:
            core_t._packed_fingerprint = struct.pack(">Q", core_t._get_hash_recursive([]))
        return core_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

